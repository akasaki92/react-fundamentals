{"version":3,"sources":["assets/hmm.png","components/SeriesList/SeriesList.js","components/Loader/index.js","components/Intro/Intro.js","containers/Series/Series.js","components/Main/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","show","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","id","Loader","src","loaderSrc","alt","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","concat","then","response","json","_this$state","this","components_Intro_Intro","type","onChange","length","trim","components_Loader","components_SeriesList_SeriesList","Component","Main","react_router","exact","path","component","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qQCGlCC,SAAiB,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACtB,OAAOC,EAAAC,EAAAC,cAAA,UAAKH,EAAOI,KAAKC,QAebC,EAZI,SAAAC,GACf,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,eACTD,EAAME,KAAKC,IAAI,SAAAV,GAAM,OAClBC,EAAAC,EAAAC,cAACQ,EAAD,CAAgBX,OAAQA,EAAQY,IAAKZ,EAAOI,KAAKS,2BCFtDC,EAPA,SAAAP,GACX,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAWC,IAAI,UCGtBC,EAPD,SAACX,GACX,OACIN,EAAAC,EAAAC,cAAA,KAAGK,UAAU,aACRD,EAAMY,UC2CJC,6MA1CXC,MAAQ,CACJrB,OAAQ,GACRsB,WAAY,GACZC,YAAY,KAGhBC,oBAAsB,SAAAC,GAClBC,EAAKC,SAAS,CAAEL,WAAYG,EAAEG,OAAOC,MAAON,YAAY,IACxDO,MAAK,wCAAAC,OAAyCN,EAAEG,OAAOC,QAClDG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIR,EAAKC,SAAS,CAAE3B,OAAQkC,EAAMX,YAAY,+EAGvD,IAAAY,EACsCC,KAAKf,MAAxCrB,EADHmC,EACGnC,OAAQsB,EADXa,EACWb,WAAYC,EADvBY,EACuBZ,WAC5B,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkC,EAAD,CAAOlB,QAAQ,kCACflB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACI0B,MAAOP,EACPgB,KAAK,OACLC,SAAUH,KAAKZ,wBAGrBD,GACoB,IAAlBvB,EAAOwC,QACe,KAAtBlB,EAAWmB,QACPxC,EAAAC,EAAAC,cAAA,qDAENoB,GACoB,IAAlBvB,EAAOwC,QACe,KAAtBlB,EAAWmB,QACPxC,EAAAC,EAAAC,cAAA,yCAEPoB,GAActB,EAAAC,EAAAC,cAACuC,EAAD,OACbnB,GAActB,EAAAC,EAAAC,cAACwC,EAAD,CAAYlC,KAAM2B,KAAKf,MAAMrB,iBArCxC4C,aCONC,EARF,SAAAtC,GACT,OACIN,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACI7C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,MCW9B8B,gMAXP,OACIjD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACXP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cACdP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aAAd,kBAEJP,EAAAC,EAAAC,cAACgD,EAAD,cAPEP,cCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OACLzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAeC,SAAS,KAAI3D,EAAAC,EAAAC,cAAC0D,EAAD,OAC5BC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.3a553bf7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hmm.929e2e31.png\";","import React from \"react\";\r\nimport \"./SeriesList.css\";\r\n\r\nconst SeriesListItem = ({ series }) => {\r\n    return <li>{series.show.name}</li>;\r\n};\r\n\r\nconst SeriesList = props => {\r\n    return (\r\n        <div>\r\n            <ul className=\"series-list\">\r\n                {props.list.map(series => (\r\n                    <SeriesListItem series={series} key={series.show.id} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeriesList;\r\n","import React from \"react\";\r\nimport loaderSrc from \"../../assets/hmm.png\";\r\n\r\nconst Loader = props => {\r\n    return (\r\n        <div>\r\n            <img src={loaderSrc} alt=\"hmm\"/>\r\n        </div>\r\n    );\r\n}\r\nexport default Loader;","import React from 'react';\r\n\r\nconst Intro = (props) => {\r\n    return (\r\n        <p className=\"App-intro\">\r\n            {props.message}\r\n        </p>\r\n    );\r\n}\r\nexport default Intro;","import React, { Component } from \"react\";\r\nimport SeriesList from \"../../components/SeriesList/SeriesList\";\r\nimport Loader from \"../../components/Loader\";\r\nimport Intro from \"../../components/Intro/Intro\";\r\n\r\nclass Series extends Component {\r\n    state = {\r\n        series: [],\r\n        seriesName: \"\",\r\n        isFetching: false\r\n    };\r\n\r\n    onSeriesInputChange = e => {\r\n        this.setState({ seriesName: e.target.value, isFetching: true });\r\n        fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ series: json, isFetching: false }));\r\n    };\r\n\r\n    render() {\r\n        const { series, seriesName, isFetching } = this.state;\r\n        return (\r\n            <div>\r\n                <Intro message=\"Here the most series you love\" />\r\n                <div>\r\n                    <input\r\n                        value={seriesName}\r\n                        type=\"text\"\r\n                        onChange={this.onSeriesInputChange}\r\n                    />\r\n                </div>\r\n                {!isFetching &&\r\n                    series.length === 0 &&\r\n                    seriesName.trim() === \"\" && (\r\n                        <p>Please enter series name into the input</p>\r\n                    )}\r\n                {!isFetching &&\r\n                    series.length === 0 &&\r\n                    seriesName.trim() !== \"\" && (\r\n                        <p>No TV series have been found</p>\r\n                    )}\r\n                {isFetching && <Loader />}\r\n                {!isFetching && <SeriesList list={this.state.series} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Series;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Series from \"../../containers/Series/Series\";\r\n\r\nconst Main = props => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Series} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport Main from \"../Main\";\r\nimport \"./App.css\";\r\nimport \"whatwg-fetch\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1 className=\"App-title\">TV Series App</h1>\r\n                </header>\r\n                <Main />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename=\"/\"><App /></BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}